CREATE TABLE IF NOT EXISTS user_sequence (
    name VARCHAR(50) PRIMARY KEY,
    next_val INT NOT NULL
);

CREATE TABLE IF NOT EXISTS tb_employees (
    user_id INT PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(25) NOT NULL,
    locked TINYINT(1) NOT NULL,
    enabled TINYINT(1) NOT NULL,
    name VARCHAR(75) NOT NULL,
    rg VARCHAR(50) NOT NULL,
    cpf VARCHAR(11) NOT NULL UNIQUE,
    phone VARCHAR(20),
    position VARCHAR(100),
    department VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    phone_ext VARCHAR(8),
    salary DECIMAL(10,2),
    status INT,
    admission_date DATE,
    termination_date DATE,
    address_street VARCHAR(50) NOT NULL,
    address_number VARCHAR(5) NOT NULL,
    address_complement VARCHAR(25) NOT NULL,
    address_city VARCHAR(50) NOT NULL,
    address_district VARCHAR(25) NOT NULL,
    address_zip_code VARCHAR(8) NOT NULL
);

CREATE TABLE IF NOT EXISTS tb_admins (
    user_id INT PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(25) NOT NULL,
    locked TINYINT(1) NOT NULL,
    enabled TINYINT(1) NOT NULL
);

CREATE TABLE IF NOT EXISTS tb_departments (
    department_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en VARCHAR(50) NOT NULL,
    name_pt_br VARCHAR(50) NOT NULL,
    acronym VARCHAR(5) NOT NULL,
    position_holder_id INT REFERENCES tb_employees(user_id)
);

CREATE TABLE IF NOT EXISTS tb_reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_owner_id INT NOT NULL,
    affiliation INT,
    area VARCHAR(200),
    budget_euro DECIMAL(10, 2),
    budget_real DECIMAL(10, 2),
    created_at DATE,
    signed_at DATE,
    CONSTRAINT fk_report_owner FOREIGN KEY (report_owner_id) REFERENCES tb_employees (user_id)
);

CREATE TABLE IF NOT EXISTS tb_kpis (
    kpi_id INT AUTO_INCREMENT PRIMARY KEY,
    description VARCHAR(255),
    kpi_value DECIMAL(10, 2)
);

CREATE TABLE IF NOT EXISTS tb_tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    description VARCHAR(255) NOT NULL,
    report_id INT,
    CONSTRAINT fk_task_report FOREIGN KEY (report_id) REFERENCES tb_reports (report_id)
);

CREATE TABLE IF NOT EXISTS report_kpis (
    report_id INT,
    kpi_id INT,
    PRIMARY KEY (report_id, kpi_id),
    CONSTRAINT fk_report_kpis_report FOREIGN KEY (report_id) REFERENCES tb_reports (report_id),
    CONSTRAINT fk_report_kpis_kpi FOREIGN KEY (kpi_id) REFERENCES tb_kpis (kpi_id)
);
